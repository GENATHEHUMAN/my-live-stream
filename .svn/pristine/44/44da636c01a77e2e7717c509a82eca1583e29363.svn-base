<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>DD TOWN Live Studio</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
            color: #ffffff;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .studio-header {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
            border-bottom: 1px solid rgba(102, 126, 234, 0.2);
            padding: 20px 0;
            backdrop-filter: blur(20px);
        }

        .studio-title {
            font-size: 28px;
            font-weight: 800;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-align: center;
            margin: 0;
        }

        .main-container {
            display: flex;
            min-height: calc(100vh - 80px);
            max-width: 100vw;
        }

        .studio-section {
            flex: 1;
            padding: 30px;
            min-width: 0;
        }

        .preview-container {
            position: relative;
            background: #000;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 12px 40px rgba(102, 126, 234, 0.3);
            margin-bottom: 30px;
            border: 2px solid rgba(102, 126, 234, 0.2);
        }

        #localVideo {
            width: 100%;
            height: auto;
            min-height: 400px;
            max-height: 60vh;
            object-fit: fill;
            background: #000;
            display: block;
        }

        .preview-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(
                to bottom,
                rgba(0,0,0,0.6) 0%,
                transparent 20%,
                transparent 80%,
                rgba(0,0,0,0.6) 100%
            );
            pointer-events: none;
        }

        .preview-indicator {
            position: absolute;
            top: 20px;
            left: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 8px 16px;
            border-radius: 25px;
            font-size: 14px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        .quality-indicator {
            position: absolute;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            color: white;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
        }

        /* Broadcast Setup Form */
        .setup-form {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
            border: 1px solid rgba(102, 126, 234, 0.2);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            backdrop-filter: blur(10px);
        }

        .form-section-title {
            font-size: 20px;
            font-weight: 700;
            color: #ffffff;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-group {
            margin-bottom: 24px;
        }

        .form-label {
            display: block;
            font-size: 14px;
            font-weight: 600;
            color: rgba(255, 255, 255, 0.9);
            margin-bottom: 8px;
        }

        .form-control {
            width: 100%;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(102, 126, 234, 0.3);
            border-radius: 12px;
            padding: 14px 16px;
            color: white;
            font-size: 14px;
            outline: none;
            transition: all 0.3s ease;
        }

        .form-control::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .form-control:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);
            background: rgba(255, 255, 255, 0.15);
        }

        textarea.form-control {
            resize: vertical;
            min-height: 100px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            color: white;
            padding: 14px 28px;
            border-radius: 25px;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            text-decoration: none;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            color: white;
        }

        .btn-danger {
            background: linear-gradient(135deg, #ff4757 0%, #ff3742 100%);
            border: none;
            color: white;
            padding: 16px 32px;
            border-radius: 25px;
            font-weight: 700;
            font-size: 18px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 12px;
        }

        .btn-danger:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 71, 87, 0.4);
            color: white;
        }

        .live-controls {
            display: none !important;
        }

        .live-controls {
            background: linear-gradient(135deg, rgba(255, 71, 87, 0.1) 0%, rgba(255, 55, 66, 0.1) 100%);
            border: 1px solid rgba(255, 71, 87, 0.3);
            border-radius: 20px;
            padding: 30px;
            text-align: center;
            backdrop-filter: blur(10px);
        }

        .live-status {
            background: linear-gradient(135deg, #ff4757 0%, #ff3742 100%);
            color: white;
            padding: 12px 24px;
            border-radius: 25px;
            font-size: 16px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 20px;
            display: inline-block;
            animation: pulse 2s infinite;
        }

        .broadcast-info {
            margin-bottom: 30px;
        }

        .broadcast-title {
            font-size: 24px;
            font-weight: 700;
            color: #ffffff;
            margin-bottom: 8px;
        }

        .broadcast-description {
            font-size: 16px;
            color: rgba(255, 255, 255, 0.8);
            margin-bottom: 16px;
        }

        .viewer-stats {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            font-size: 18px;
            font-weight: 600;
            color: #ffffff;
        }

        .chat-section {
            width: 350px;
            background: linear-gradient(135deg, rgba(26, 26, 46, 0.95) 0%, rgba(22, 33, 62, 0.95) 100%);
            border-left: 1px solid rgba(102, 126, 234, 0.2);
            display: flex;
            flex-direction: column;
            backdrop-filter: blur(20px);
        }

        .chat-header {
            padding: 20px;
            border-bottom: 1px solid rgba(102, 126, 234, 0.2);
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
        }

        .chat-title {
            font-size: 18px;
            font-weight: 700;
            color: #ffffff;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .chat-container {
            flex: 1;
            overflow-y: auto;
            padding: 16px;
            max-height: calc(100vh - 200px);
        }

        .chat-messages {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .chat-messages li {
            margin-bottom: 12px;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .message-artist {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.2) 0%, rgba(118, 75, 162, 0.2) 100%);
            border: 1px solid rgba(102, 126, 234, 0.3);
            border-radius: 16px;
            padding: 16px;
            margin-bottom: 12px;
        }

        .message-artist strong {
            color: #667eea;
            font-weight: 700;
        }

        .message-mine {
            text-align: right;
            margin-bottom: 12px;
        }

        .message-mine .message-bubble {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 10px 16px;
            border-radius: 18px;
            display: inline-block;
            max-width: 80%;
            word-wrap: break-word;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }

        .message-other {
            text-align: left;
            margin-bottom: 12px;
        }

        .message-other .message-bubble {
            background: rgba(255, 255, 255, 0.1);
            color: rgba(255, 255, 255, 0.9);
            padding: 10px 16px;
            border-radius: 18px;
            display: inline-block;
            max-width: 80%;
            word-wrap: break-word;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .message-other strong {
            color: rgba(255, 255, 255, 0.8);
            font-weight: 600;
        }

        .message-sender {
            font-size: 12px;
            color: rgba(255, 255, 255, 0.6);
            margin-bottom: 4px;
        }

        .message-mine .message-sender {
            text-align: right;
        }

        .message-other .message-sender {
            text-align: left;
        }

        .chat-input-section {
            padding: 16px;
            border-top: 1px solid rgba(102, 126, 234, 0.2);
            background: linear-gradient(135deg, rgba(15, 15, 35, 0.8) 0%, rgba(26, 26, 46, 0.8) 100%);
        }

        .chat-input-group {
            display: flex;
            gap: 8px;
        }

        #chatInput {
            flex: 1;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(102, 126, 234, 0.3);
            border-radius: 20px;
            padding: 12px 16px;
            color: white;
            font-size: 14px;
            outline: none;
            transition: all 0.3s ease;
        }

        #chatInput::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        #chatInput:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);
            background: rgba(255, 255, 255, 0.15);
        }

        #sendChatBtn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            color: white;
            padding: 12px 16px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
        }

        #sendChatBtn:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        @media (max-width: 1200px) {
            .chat-section {
                width: 300px;
            }
        }

        @media (max-width: 768px) {
            .main-container {
                flex-direction: column;
            }
            
            .chat-section {
                width: 100%;
                max-height: 300px;
            }
            
            .studio-section {
                padding: 20px;
            }
            
            .setup-form, .live-controls {
                padding: 20px;
            }
        }

        .chat-container::-webkit-scrollbar {
            width: 8px;
        }

        .chat-container::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }

        .chat-container::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 4px;
        }

        .chat-container::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.8; transform: scale(1.05); }
        }

        .container {
            max-width: 100%;
            padding: 0;
        }

        .form-buttons {
            display: flex;
            gap: 16px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .btn-secondary {
            background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
            border: none;
            color: white;
            padding: 14px 28px;
            border-radius: 25px;
            font-weight: 600;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 10px;
            text-decoration: none;
        }

        .btn-secondary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(108, 117, 125, 0.4);
            color: white;
        }

        .live-controls-compact {
            bottom: 20px;
            left: 20px;
            right: 20px;
            background: linear-gradient(135deg, rgba(0, 0, 0, 0.8) 0%, rgba(26, 26, 46, 0.9) 100%);
            border: 1px solid rgba(255, 71, 87, 0.3);
            border-radius: 12px;
            padding: 16px 20px;
            backdrop-filter: blur(20px);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
        }

        .live-controls-content {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 20px;
        }

        .live-status-compact {
            background: linear-gradient(135deg, #ff4757 0%, #ff3742 100%);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            animation: pulse 2s infinite;
            flex-shrink: 0;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .broadcast-info-compact {
            flex: 1;
            min-width: 0;
            text-align: center;
        }

        .broadcast-title-compact {
            font-size: 18px;
            font-weight: 700;
            color: #ffffff;
            margin-bottom: 4px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .broadcast-description-compact {
            font-size: 14px;
            color: rgba(255, 255, 255, 0.7);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .broadcast-stats {
            display: flex;
            align-items: center;
            gap: 16px;
            flex-shrink: 0;
        }

        .viewer-stats-compact {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 14px;
            font-weight: 600;
            color: #ffffff;
            background: rgba(255, 255, 255, 0.1);
            padding: 8px 12px;
            border-radius: 20px;
        }

        .btn-danger-compact {
            background: linear-gradient(135deg, #ff4757 0%, #ff3742 100%);
            border: none;
            color: white;
            padding: 10px 16px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .btn-danger-compact:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 71, 87, 0.4);
            color: white;
        }

        .live-controls {
            display: none !important;
        }
        
        html {
		    height: 100%;
		}
		body {
		    height: 100vh; 
		    overflow: hidden; 
		    display: flex;
		    flex-direction: column;
		}
		.main-container {
		    flex-grow: 1; 
		    min-height: 0; 
		}
		.chat-section {
		    height: 100%; 
		}
		.chat-container {
		    flex: 1; 
		    max-height: none; 
		}
		
		.studio-section {
		    display: flex;
		    flex-direction: row;
		    gap: 20px;
		    align-items: flex-start;
		}
		
		.preview-container {
		    flex: 2; 
		    margin-bottom: 0; 
		}
		
		#localVideo {
		    max-height: 750px;
		}
		
		.setup-form {
		    flex: 1; 
		    margin-bottom: 0; 
		    max-width: 450px;
		}
		.setup-form{
			flex:1; 	
		}
		
		.studio-section.is-live {
			flex-direction: column;
			align-items: stretch;
		}
		
		.studio-section.is-live .preview-container {
			flex: none;
		}
		.studio-section.is-live .setup-form {
			display: none;
		}
		.studio-section.is-live #broadcastControls {
			display: none;
		}
		
		
		
    </style>
</head>
<body>
    <div class="studio-header">
        <div class="container">
            <h1 class="studio-title" id="broadcastTitle">DD TOWN Live Studio</h1>
        </div>
    </div>

    <div class="main-container">
        <!-- Studio Section -->
        <div class="studio-section">
            <div class="preview-container">
                <video id="localVideo" autoplay muted playsinline></video>
                <div class="preview-overlay"></div>
                <div class="preview-indicator">
                    <i class="bi bi-camera-video"></i> PREVIEW
                </div>
                <div class="quality-indicator" id="qualityIndicator">HD</div>
            </div>

            <!-- Broadcast Setup Form -->
            <form id="broadcastForm" class="setup-form">
                <div class="form-section-title">
                    <i class="bi bi-broadcast"></i>
                    방송 설정
                </div>
                
                <div class="form-group">
                    <label for="title" class="form-label">방송 제목</label>
                    <input type="text" class="form-control" id="title" placeholder="시청자들에게 보여질 방송 제목을 입력하세요" required>
                </div>
                
                <div class="form-group">
                    <label for="description" class="form-label">방송 설명</label>
                    <textarea class="form-control" id="description" rows="3" placeholder="방송 내용에 대한 간단한 설명을 입력하세요" required></textarea>
                </div>
                
                <div class="form-group">
                    <label for="quality" class="form-label">방송 화질</label>
                    <select class="form-control form-select" id="quality" required>
                        <option value="HD" selected>HD (1280x720) - 권장</option>
                        <option value="FHD">FHD (1920x1080) - 고화질</option>
                    </select>
                </div>
                
                <div class="form-buttons">
                    <button type="submit" class="btn-primary">
                        <i class="bi bi-play-circle"></i>
                        방송 시작하기
                    </button>
                    <button type="button" class="btn-secondary" onclick="window.close()">
                        <i class="bi bi-x-circle"></i>
                        취소하기
                    </button>
                </div>
            </form>

            <!-- Live Controls (Hidden) -->
            <div id="broadcastControls" class="live-controls-compact" style="display: none;   overflow-y: hidden;">
                <div class="live-controls-content">
                    <div class="live-status-compact">
                        <i class="bi bi-broadcast"></i> LIVE
                    </div>
                    
                    <div class="broadcast-info-compact">
                        <div class="broadcast-title-compact" id="displayBroadcastTitle"></div>
                        <div class="broadcast-description-compact" id="displayBroadcastDescription"></div>
                    </div>
                    
                    <div class="broadcast-stats">
                        <div class="viewer-stats-compact">
                            <i class="bi bi-eye-fill"></i>
                            <span id="viewer-count">0</span>명이 시청 중
                        </div>
                        <button type="button" id="endBroadcast" class="btn-danger-compact">
                            <i class="bi bi-stop-circle"></i>
                            방송 종료
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Chat Section (Hidden ) -->
        <div class="chat-section" id="chatArea" style="display: none;">
            <div class="chat-header">
                <div class="chat-title">
                    <i class="bi bi-chat-dots"></i>
                    라이브 채팅
                </div>
            </div>
            
            <div class="chat-container">
                <ul id="chatMessages" class="chat-messages"></ul>
            </div>
            
            <div class="chat-input-section">
                <div class="chat-input-group">
                    <input type="text" id="chatInput" placeholder="시청자들과 소통해보세요...">
                    <button id="sendChatBtn">
                        <i class="bi bi-send"></i>
                        전송
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.0/sockjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
    
    <script>
        // 전역 변수 선언 (모든 함수에서 접근 가능)
        let stompClient = null;
        let localStream = null;
        let peerConnections = {};
        let broadcastId = null;
        let chatChannelNo = null; 
        let artGroupNo = null;
        let userId = null;
        let myNick = null; 
        
        const urlParams = new URLSearchParams(window.location.search); 

        const configuration = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' }
            ]
        };

        async function startBroadcastMedia() { 
            const qualitySelect = document.getElementById('quality');
            const selectedQuality  = qualitySelect.value;
            const qualityIndicator = document.getElementById('qualityIndicator');
            
            let videoConstraints = {};
            
            if (selectedQuality === 'FHD') {
                console.log('FHD(1080p) 화질로 설정합니다.');
                videoConstraints = {
                    width: { ideal: 1920 },
                    height: { ideal: 1080 }
                };
                qualityIndicator.textContent = 'FHD';
            } else { 
                console.log('HD(720p) 화질로 설정합니다.');
                videoConstraints = {
                    width: { ideal: 1280 },
                    height: { ideal: 720 }
                };
                qualityIndicator.textContent = 'HD';
            }
            
            try {
                localStream = await navigator.mediaDevices.getUserMedia({
                  video: videoConstraints,
                  audio: true
                });
                document.getElementById('localVideo').srcObject = localStream;
            } catch (err) {
                console.error('Error accessing media devices:', err);
                Swal.fire({
                    icon: 'error',
                    title: '카메라 접근 오류',
                    text: '카메라와 마이크 접근 권한이 필요합니다.',
                    confirmButtonColor: '#667eea'
                });
            }
        }
        
        function connect() {
            const socket = new SockJS('/ws');
            stompClient = Stomp.over(socket);
            
            stompClient.connect({}, function(frame) {
                console.log('WebSocket 연결 성공: ' + frame);
                stompClient.subscribe('/topic/signal', function(message) {
                    const signal = JSON.parse(message.body);
                    handleSignal(signal);
                });
            }, function(error) {
                console.error('WebSocket 연결 실패:', error);
                Swal.fire({
                    icon: 'error',
                    title: '연결 오류',
                    text: 'WebSocket 연결에 실패했습니다.',
                    confirmButtonColor: '#667eea'
                });
            });
        }
        
        async function handleSignal(signal) {
            if (signal.type === 'viewer-join') {
                const peerConnection = createPeerConnection(signal.sender);
                try {
                    const offer = await peerConnection.createOffer();
                    await peerConnection.setLocalDescription(offer);
                    stompClient.send("/app/signal", {}, JSON.stringify({
                        type: 'offer', sender: broadcastId, receiver: signal.sender, data: offer
                    }));
                } catch (error) { console.error('Offer 생성 중 오류:', error); }
            } else if (signal.type === 'answer') {
                const pc = peerConnections[signal.sender];
                if (pc) await pc.setRemoteDescription(new RTCSessionDescription(signal.data));
            } else if (signal.type === 'ice-candidate') {
                const pc = peerConnections[signal.sender];
                if (pc) await pc.addIceCandidate(new RTCIceCandidate(signal.data));
            }
        }
        
        function createPeerConnection(viewerId) {
            const peerConnection = new RTCPeerConnection(configuration);
            peerConnections[viewerId] = peerConnection;
            localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
            peerConnection.onicecandidate = event => {
                if (event.candidate) {
                    stompClient.send("/app/signal", {}, JSON.stringify({
                        type: 'ice-candidate', sender: broadcastId, receiver: viewerId, data: event.candidate
                    }));
                }
            };
            return peerConnection;
        }

     // 채팅 메시지를 화면에 표시하는 함수
        function displayChatMessage(message) {
            const chatContainer = document.querySelector('.chat-container');
            const chatMessages = document.getElementById('chatMessages');

            const isScrolledToBottom = chatContainer.scrollHeight - chatContainer.clientHeight <= chatContainer.scrollTop + 10;

            const li = document.createElement('li');

            let senderName = message.senderNick;
            
            if (message.isArtist) {
                li.className = 'message-artist';
                li.innerHTML = `
                    <div class="message-sender">
                        ${senderName}
                        <img src="${pageContext.request.contextPath}/resources/img/verified.png" alt="인증마크" 
                             style="width: 14px; height: 14px; vertical-align: baseline; margin-left: 4px;">
                    </div>
                    <div>${message.message}</div>
                `;
            }
            else if (myNick && message.senderNick === myNick) {
                li.className = 'message-mine';
                li.innerHTML = `
                    <div class="message-sender">${senderName}</div>
                    <div class="message-bubble">${message.message}</div>
                `;
            }
            else {
                li.className = 'message-other';
                li.innerHTML = `
                    <div class="message-sender">${senderName}</div>
                    <div class="message-bubble">${message.message}</div>
                `;
            }
            
            chatMessages.appendChild(li);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        document.addEventListener('DOMContentLoaded', function() {
            const broadcastTitle = document.getElementById('broadcastTitle');
            const titleInput = document.getElementById('title');
            const descriptionInput = document.getElementById('description');
            const qualitySelect = document.getElementById('quality');
            const broadcastForm = document.getElementById('broadcastForm');
            const broadcastControls = document.getElementById('broadcastControls');
            const chatArea = document.getElementById('chatArea');
            const endBroadcastBtn = document.getElementById('endBroadcast'); 

            const displayBroadcastTitle = document.getElementById('displayBroadcastTitle');
            const displayBroadcastDescription = document.getElementById('displayBroadcastDescription');

            const chatInput = document.getElementById('chatInput');
            const sendChatBtn = document.getElementById('sendChatBtn');

            artGroupNo = urlParams.get('artGroupNo'); 
            userId = urlParams.get('userId');         
            const artGroupNm = urlParams.get('artGroupNm');
            myNick = decodeURIComponent(artGroupNm || 'Unknown Artist'); 

            if (artGroupNm) {
                broadcastTitle.textContent = `${decodeURIComponent(artGroupNm)} | Live Studio`;
                titleInput.value = `${decodeURIComponent(artGroupNm)}의 라이브 방송입니다!`;
            } else {
                broadcastTitle.textContent = 'DD TOWN Live Studio';
            }
            
            connect();
            startBroadcastMedia(); 

            qualitySelect.addEventListener('change', startBroadcastMedia);

            broadcastForm.addEventListener('submit', function (e) {
                e.preventDefault();
                
                const newBroadcastId = 'broadcaster-' + Date.now();
                const enteredTitle = titleInput.value;
                const enteredDescription = descriptionInput.value;
                
                const broadcastData = {
                    title: enteredTitle,
                    description: enteredDescription,
                    liveQty: qualitySelect.value,
                    broadcasterId: newBroadcastId,
                    artGroupNo: artGroupNo,
                    artGroupNm: decodeURIComponent(artGroupNm),
                    userId: userId
                };

                broadcastId = newBroadcastId;
                console.log('✅ [할당 시점] broadcastId가 설정되었습니다:', broadcastId);

                stompClient.send("/app/broadcast/start", {}, JSON.stringify(broadcastData));

                document.getElementById('broadcastForm').style.display = 'none';
                
	             document.getElementById('broadcastControls').style.display = 'block';
	             
	             document.getElementById('chatArea').style.diplay = 'flex';
	             
	             document.querySelector('.studio-section').classList.add('is-live');
	             
                chatArea.style.display = 'flex';
                
                document.getElementById('displayBroadcastTitle').textContent = enteredTitle;
                document.getElementById('displayBroadcastDescription').textContent = enteredDescription;
                
                const previewIndicator = document.querySelector('.preview-indicator');
                previewIndicator.innerHTML = '<i class="bi bi-broadcast"></i> LIVE';
                previewIndicator.style.background = 'linear-gradient(135deg, #ff4757 0%, #ff3742 100%)';
                
                stompClient.subscribe('/topic/viewers/' + broadcastId, function(message) {
                    const data = JSON.parse(message.body);
                    const viewerCountElement = document.getElementById('viewer-count');
                    if (viewerCountElement) {
                        viewerCountElement.textContent = data.viewerCount;
                    }
                });

                stompClient.subscribe('/topic/broadcast-info/' + broadcastId, function(message) {
                    const data = JSON.parse(message.body);
                    if (data.chatChannelNo) {
                        chatChannelNo = data.chatChannelNo;
                        console.log('✅ chatChannelNo가 설정되었습니다:', chatChannelNo);

                        stompClient.subscribe('/topic/chat/' + chatChannelNo, function(chatMessage) {
                            displayChatMessage(JSON.parse(chatMessage.body));
                        });
                    }
                });

                sendChatBtn.addEventListener('click', sendChatMessage);
                chatInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        sendChatMessage();
                    }
                });
            });

            endBroadcastBtn.addEventListener('click', function () {
                console.log('✅ [사용 시점] 방송 종료 버튼 클릭됨. 현재 broadcastId:', broadcastId);
                
                Swal.fire({
                    title: "방송을 종료하시겠습니까?", 
                    text: "종료된 방송은 다시 시작할 수 없습니다.", 
                    icon: "warning",
                    showCancelButton: true, 
                    confirmButtonColor: "#ff4757", 
                    cancelButtonColor: "#667eea",
                    confirmButtonText: "네, 종료합니다.", 
                    cancelButtonText: "취소",
                    background: '#1a1a2e',
                    color: '#ffffff'
                }).then((result) => {
                    if (result.isConfirmed) {
                        if (broadcastId) {
                            stompClient.send("/app/broadcast/end", {}, JSON.stringify({
                                broadcasterId: broadcastId
                            }));
                            for (const viewerId in peerConnections) {
                                if (peerConnections[viewerId]) {
                                    peerConnections[viewerId].close();
                                    delete peerConnections[viewerId];
                                }
                            }
                            if (localStream) {
                                localStream.getTracks().forEach(track => track.stop());
                            }
                            if (stompClient && stompClient.connected) {
                                stompClient.disconnect(function() {
                                    console.log("STOMP connection disconnected.");
                                });
                            }
                            window.close();
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: '오류',
                                text: '방송 ID가 없어 종료할 수 없습니다.',
                                confirmButtonColor: '#667eea',
                                background: '#1a1a2e',
                                color: '#ffffff'
                            });
                        }
                    }
                });
            });

            function sendChatMessage() {
                const messageContent = chatInput.value.trim();
                if (messageContent && stompClient && chatChannelNo) {
                    const chatMessage = {
                        chatChannelNo: chatChannelNo,
                        senderNick: myNick, 
                        message: messageContent,
                        isArtist: true 
                    };
                    stompClient.send("/app/chat/" + chatChannelNo, {}, JSON.stringify(chatMessage));
                    chatInput.value = '';
                } else if (!chatChannelNo) {
                    console.warn("채팅 채널 번호가 아직 설정되지 않았습니다. 메시지를 보낼 수 없습니다.");
                }
            }
        });

        window.onbeforeunload = function() {
            for (const viewerId in peerConnections) {
                if (peerConnections[viewerId]) {
                    peerConnections[viewerId].close();
                }
            }
            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
            }
            if (stompClient && stompClient.connected) {
                stompClient.disconnect(function() {
                    console.log("STOMP connection disconnected on unload.");
                });
            }
        };
    </script>
</body>
</html>